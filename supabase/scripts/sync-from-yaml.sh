#!/bin/bash

# Sync Cron Jobs from YAML Configuration
# Reads cron-jobs.yaml and applies configuration to Supabase

set -e

# Load environment variables from .env file
PROJECT_ROOT="$(cd "$(dirname "$0")/../.." && pwd)"
if [ -f "$PROJECT_ROOT/.env" ]; then
  set -a
  source "$PROJECT_ROOT/.env"
  set +a
fi

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Check if SUPABASE_DB_URL is set
if [ -z "$SUPABASE_DB_URL" ]; then
  echo -e "${RED}Error: SUPABASE_DB_URL environment variable is not set${NC}"
  echo ""
  echo "To get your database URL:"
  echo "  1. Go to Supabase Dashboard → Project Settings → Database"
  echo "  2. Copy the 'Connection string' under 'Connection parameters'"
  echo "  3. Replace [YOUR-PASSWORD] with your database password"
  echo ""
  echo "Usage: SUPABASE_DB_URL='postgresql://...' $0"
  exit 1
fi

# Check if psql is installed
if ! command -v psql &> /dev/null; then
  echo -e "${RED}Error: psql is not installed${NC}"
  echo "Install it with: brew install postgresql (macOS) or apt-get install postgresql-client (Linux)"
  exit 1
fi

# Check for YAML parser (yq or python with PyYAML)
YAML_PARSER=""
if command -v yq &> /dev/null; then
  YAML_PARSER="yq"
elif command -v python3 &> /dev/null && python3 -c "import yaml" 2>/dev/null; then
  YAML_PARSER="python"
else
  echo -e "${RED}Error: No YAML parser found${NC}"
  echo "Install one of:"
  echo "  - yq: brew install yq (recommended)"
  echo "  - Python PyYAML: pip install pyyaml"
  exit 1
fi

echo -e "${BLUE}╔══════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║  Sync Cron Jobs from YAML                   ║${NC}"
echo -e "${BLUE}╚══════════════════════════════════════════════╝${NC}"
echo ""

YAML_FILE="$(dirname "$0")/../cron-jobs.yaml"

if [ ! -f "$YAML_FILE" ]; then
  echo -e "${RED}Error: cron-jobs.yaml not found at ${YAML_FILE}${NC}"
  exit 1
fi

echo -e "${GREEN}✓ Found configuration: ${YAML_FILE}${NC}"
echo -e "${YELLOW}  Using parser: ${YAML_PARSER}${NC}"
echo ""

# Function to execute SQL
execute_sql() {
  local sql="$1"
  echo "$sql" | psql "$SUPABASE_DB_URL" -t -A
}

# Function to execute SQL with formatting
execute_sql_formatted() {
  local sql="$1"
  echo "$sql" | psql "$SUPABASE_DB_URL"
}

# Create a temporary SQL file
TEMP_SQL=$(mktemp)
trap "rm -f $TEMP_SQL" EXIT

echo -e "${BLUE}Generating SQL from YAML configuration...${NC}"
echo ""

# Generate SQL using Python parser
cat > "$TEMP_SQL" << 'PYTHON_SCRIPT'
#!/usr/bin/env python3
import yaml
import sys

def escape_sql(text):
    """Escape single quotes for SQL"""
    return text.replace("'", "''")

def generate_sql(yaml_file):
    with open(yaml_file, 'r') as f:
        config = yaml.safe_load(f)

    sql_parts = []

    # Header
    sql_parts.append("-- Generated from cron-jobs.yaml")
    sql_parts.append("-- DO NOT EDIT THIS FILE DIRECTLY - Edit cron-jobs.yaml instead\n")

    # Enable pg_cron extension
    sql_parts.append("-- Enable pg_cron extension")
    sql_parts.append("CREATE EXTENSION IF NOT EXISTS pg_cron WITH SCHEMA extensions;\n")

    # Grant permissions
    sql_parts.append("-- Grant necessary permissions")
    sql_parts.append("GRANT USAGE ON SCHEMA cron TO postgres;")
    sql_parts.append("GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA cron TO postgres;\n")

    # Create/update functions
    if 'functions' in config and config['functions']:
        sql_parts.append("-- Create or replace functions")
        for func in config['functions']:
            name = func['name']
            schema = func.get('schema', 'public')
            returns = func.get('returns', 'void')
            language = func.get('language', 'plpgsql')
            security = func.get('security', 'definer')
            search_path = func.get('search_path', 'public')
            body = func['body']
            description = func.get('description', '')

            sql_parts.append(f"\n-- Function: {name}")
            if description:
                sql_parts.append(f"-- {description}")

            func_sql = f"""CREATE OR REPLACE FUNCTION {schema}.{name}()
RETURNS {returns}
LANGUAGE {language}
SECURITY {security.upper()}
SET search_path = {search_path}
AS $$
{body}
$$;"""
            sql_parts.append(func_sql)

            if description:
                comment_sql = f"COMMENT ON FUNCTION {schema}.{name}() IS '{escape_sql(description)}';"
                sql_parts.append(comment_sql)

    # Schedule cron jobs
    if 'jobs' in config and config['jobs']:
        sql_parts.append("\n-- Schedule cron jobs")

        for job in config['jobs']:
            name = job['name']
            schedule = job['schedule']
            command = job['command']
            enabled = job.get('enabled', True)
            description = job.get('description', '')

            sql_parts.append(f"\n-- Job: {name}")
            if description:
                sql_parts.append(f"-- {description}")

            # Unschedule if exists (idempotent)
            unschedule_sql = f"""DO $$
BEGIN
  PERFORM cron.unschedule('{name}');
EXCEPTION
  WHEN undefined_object THEN
    NULL;
END $$;"""
            sql_parts.append(unschedule_sql)

            # Schedule the job
            schedule_sql = f"""SELECT cron.schedule(
  '{name}',
  '{schedule}',
  $${command}$$
);"""
            sql_parts.append(schedule_sql)

            # Enable or disable based on config
            if not enabled:
                disable_sql = f"SELECT cron.alter_job('{name}', enabled := false);"
                sql_parts.append(f"-- Disabled by configuration")
                sql_parts.append(disable_sql)

    return '\n'.join(sql_parts)

if __name__ == '__main__':
    yaml_file = sys.argv[1] if len(sys.argv) > 1 else '../cron-jobs.yaml'
    sql = generate_sql(yaml_file)
    print(sql)
PYTHON_SCRIPT

# Generate SQL
if [ "$YAML_PARSER" = "python" ]; then
  python3 - "$YAML_FILE" < "$TEMP_SQL" > "${TEMP_SQL}.generated"
else
  # Use yq (future enhancement if needed)
  python3 - "$YAML_FILE" < "$TEMP_SQL" > "${TEMP_SQL}.generated"
fi

GENERATED_SQL="${TEMP_SQL}.generated"

if [ ! -s "$GENERATED_SQL" ]; then
  echo -e "${RED}Error: Failed to generate SQL from YAML${NC}"
  exit 1
fi

echo -e "${GREEN}✓ SQL generated successfully${NC}"
echo ""

# Show preview of SQL
echo -e "${BLUE}Preview of generated SQL:${NC}"
echo "---"
head -n 20 "$GENERATED_SQL"
echo "..."
echo "---"
echo ""

# Ask for confirmation
read -p "Apply this configuration to database? (y/N): " confirm
if [[ $confirm != [yY] ]]; then
  echo "Cancelled"
  exit 0
fi

echo ""
echo -e "${YELLOW}Applying configuration to database...${NC}"
echo ""

# Apply SQL
psql "$SUPABASE_DB_URL" < "$GENERATED_SQL" || {
  echo -e "${RED}Failed to apply configuration${NC}"
  exit 1
}

echo ""
echo -e "${GREEN}✓ Configuration applied successfully${NC}"
echo ""

# Verify cron jobs
echo -e "${BLUE}Verifying cron jobs:${NC}"
echo ""

VERIFY_SQL="
SELECT
  jobname,
  schedule,
  CASE WHEN active THEN '✓ Active' ELSE '✗ Inactive' END as status,
  LEFT(command, 60) as command
FROM cron.job
WHERE jobname NOT LIKE 'pg_cron%'
ORDER BY jobname;
"

execute_sql_formatted "$VERIFY_SQL"

echo ""
echo -e "${GREEN}╔══════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║  Sync Complete!                              ║${NC}"
echo -e "${GREEN}╚══════════════════════════════════════════════╝${NC}"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "  • View logs: ./supabase/scripts/manage-cron.sh logs"
echo "  • Test job: ./supabase/scripts/manage-cron.sh run <job-name>"
echo "  • List jobs: ./supabase/scripts/manage-cron.sh list"
echo ""
